<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-01-21T11:06:23+00:00</updated><id>/</id><title type="html">Alex Saunders</title><author><name>Alex Saunders</name></author><entry><title type="html">Setting up a Jekyll site with a Streaming Service Worker</title><link href="/posts/2017/10/18/streaming-service-workers/post/" rel="alternate" type="text/html" title="Setting up a Jekyll site with a Streaming Service Worker" /><published>2017-10-18T00:00:00+01:00</published><updated>2017-10-18T00:00:00+01:00</updated><id>/posts/2017/10/18/streaming-service-workers/streaming-service-workers</id><content type="html" xml:base="/posts/2017/10/18/streaming-service-workers/post/">&lt;p&gt;For my first foray into streams I decided to try and hook up this site, a static site generated by &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, with a streaming service worker.&lt;/p&gt;

&lt;h2 id=&quot;wait-whats-a-stream&quot;&gt;Wait, what’s a stream?&lt;/h2&gt;

&lt;p&gt;According to Wikipedia, a stream is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stream_(computing)&quot;&gt;“sequence of data elements made available over time”&lt;/a&gt;. They allow you to read and write asynchronous chunks of data, as and when they become available. There exist 3 different types of streams:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Readable Streams:&lt;/strong&gt; Represent a source of data, from which you can read. In other words, data comes out of a readable stream. Concretely, a readable stream is an instance of the ReadableStream class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Writable Streams:&lt;/strong&gt; Represent a destination for data, into which you can write. In other words, data goes in to a writable stream. Concretely, a writable stream is an instance of the WritableStream class.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Transform Streams:&lt;/strong&gt; Consist of a pair of streams: a writable stream, and a readable stream. In a manner specific to the transform stream in question, writes to the writable side result in new data being made available for reading from the readable side. Concretely, any object with a writable property and a readable property can serve as a transform stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Definitions taken from the &lt;a href=&quot;https://streams.spec.whatwg.org&quot;&gt;whatwg streams spec&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B: Transform Streams have not been fully developed yet and as such are not available  without a polyfill, more on this later..&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-case&quot;&gt;Use case&lt;/h2&gt;

&lt;p&gt;That’s great and all, but what would be an actual use case for using a stream? Let’s say we want to fetch the content for a given page, perhaps the content for a particular blog post? Traditionally we would generate the static markup for the page, including all extra elements like headers, footer etc. We would make a request for the page, wait for it to be retrieved, process the HTML and render it onto the page. This is generally a bad experience for the user as they’re provided with a blank page until everything is loaded and processed, which could take considerable time, whereupon all the content flashes in.&lt;/p&gt;

&lt;p&gt;An alternative method which is commonly employed is initally loading an &lt;a href=&quot;https://developers.google.com/web/fundamentals/architecture/app-shell&quot;&gt;‘app shell’&lt;/a&gt; while asynchronously loading the main page content. An app shell is the minimal HTML, CSS and JavaScript required to power the user interface, i.e. the header and footer for a page and perhaps some placeholder content signifying that the main content is loading (think &lt;a href=&quot;https://cloudcannon.com/deconstructions/2014/11/15/facebook-content-placeholder-deconstruction.html&quot;&gt;Facebook’s placeholder content&lt;/a&gt; while posts etc. are loading).&lt;/p&gt;

&lt;p&gt;Streams provide a newer alternative to the traditional App Shell model, one in which the user gets access to meaningful content faster when navigating to a page. Streaming a response employs similar tactics to loading a page via the App Shell model. Much like App Shell, a streamed response takes advantage of caching initial chunks of HTML in order to display them instantly, even while offline. These cached chunks of HTML usually include the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, header and footer elements (i.e. those that do not change their content across multiple pages*). These cached chunks are sent to user, providing an immediate response (rather than a blank page while everything loads as in a HTML page served traditionally). The difference comes when loading and displaying the dynamic page content. In the app shell model, this content is typically fetched, processed and then rendered onto the page all in one go. This can often leave the user with a large blank space while all the content is being downloaded, parsed and processed (it is not uncommon to leave placeholder content, as mentioned earlier, and/or a loading indicator while this is going on). However, with streaming, we get to render chunks of the content as soon as it is fetched and process, while the rest of the content is still fetching or processing. This allows us to display content on the page &lt;em&gt;as soon&lt;/em&gt; as it is available, without having to wait for the rest of the content to be ready. Technically, we’re even able to render the whole content quicker because the processing and rendering can happen in parallel with the fetching, instead of serially! You can see how this links to the definition of a transform stream as detailed earlier, first we &lt;em&gt;read&lt;/em&gt; from the network, &lt;em&gt;transform&lt;/em&gt; it to HTML data, then &lt;em&gt;write/render&lt;/em&gt; it to the screen.&lt;/p&gt;

&lt;p&gt;Jake Archibald has a fantastic &lt;a href=&quot;https://jakearchibald.com/2016/streams-ftw/&quot;&gt;blog post&lt;/a&gt; on the benefits of streams, with some great GIFS and diagrams to help explain the streaming process (that I could only dream of being able to replicate).&lt;/p&gt;

&lt;p&gt;Recently, the use of streams has been exposed to developers, allowing for custom streamed responses to page fetch requests within the service worker. Streams are not new to browsers though, elements such as images and videos are automatically streamed (think about when you see an image load in by ‘chunks’ at a time when on a poor connection).&lt;/p&gt;

&lt;p&gt;*we will discuss changing the page title later.&lt;/p&gt;

&lt;h2 id=&quot;streams-and-jekyll-sites&quot;&gt;Streams and Jekyll sites&lt;/h2&gt;

&lt;p&gt;It’s clear to see how streams could help with the loading of posts within a typical blog-style Jekyll site.&lt;/p&gt;</content><author><name>Alex Saunders</name></author><category term="Streams" /><category term="Service Worker" /><category term="JavaScript" /><summary type="html">For my first foray into streams I decided to try and hook up this site, a static site generated by Jekyll, with a streaming service worker.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/dist/images/streaming-service-workers/streaming-service-workers.jpg" /></entry><entry><title type="html">Today I Learned</title><link href="/posts/2017/09/12/today-i-learned/post/" rel="alternate" type="text/html" title="Today I Learned" /><published>2017-09-12T01:03:14+01:00</published><updated>2017-09-12T01:03:14+01:00</updated><id>/posts/2017/09/12/today-i-learned/today-i-learned</id><content type="html" xml:base="/posts/2017/09/12/today-i-learned/post/">&lt;p&gt;I aim to use this space to keep an updated list of things I recently learnt and found interesting enough to note down.&lt;/p&gt;

&lt;style&gt;
  figure.example {
    max-width: 100%;
    background: #3099DD;
    padding: 8px;
    margin: 16px 0;
  }
  figure.example figcaption {
    font-size: 16px;
    text-align: center;
    background: #0e2439;
    color: #fff;
  }
  figure.example .fill {
    margin: 8px auto;
    width: 250px;
    height: 250px;
    background: #fff;
  }
  figure.example p {
    margin: 0;
    text-align: center;
    color: #fff;
  }

  figure.example.min-content {
    width: min-content;
  }
  figure.example.max-content {
    width: max-content;
  }

  .footer-example &gt; div {
    border: 1px solid red;
  }
  .footer-example .left {
    float: left;
  }
  .footer-example .right {
    float: right;
  }
  .footer-example .center {
    margin: 0 auto;
    width: max-content;
  }
&lt;/style&gt;

&lt;h2 id=&quot;2017-09-12-max--min-content&quot;&gt;2017-09-12: max &amp;amp; min-content&lt;/h2&gt;

&lt;p&gt;There exists 2 values for the css &lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt; attribute that I didn’t know about: &lt;code class=&quot;highlighter-rouge&quot;&gt;max-content&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;min-content&lt;/code&gt;. Respectively, they adjust the width of an element to be that of the widest or most narrow object it contains. See examples below:&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;width: min-content&lt;/code&gt;, the card’s width is set to the most narrow element within it, that being the white square, which has a width of 250px.&lt;/p&gt;

&lt;figure class=&quot;example min-content&quot;&gt;
  &lt;figcaption&gt;min-content&lt;/figcaption&gt;
  &lt;div class=&quot;fill&quot;&gt;&lt;/div&gt;
  &lt;p&gt;Ut aute in nisi cillum consequat excepteur minim culpa non fugiat deserunt.&lt;/p&gt;
&lt;/figure&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;width: max-content&lt;/code&gt;, the card’s width is set to the widest element within it, that being the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element below the white square.&lt;/p&gt;

&lt;figure class=&quot;example max-content&quot;&gt;
  &lt;figcaption&gt;max-content&lt;/figcaption&gt;
  &lt;div class=&quot;fill&quot;&gt;&lt;/div&gt;
  &lt;p&gt;Ut aute in nisi cillum consequat excepteur minim culpa non fugiat deserunt.&lt;/p&gt;
&lt;/figure&gt;

&lt;p&gt;Using this, we can create a layout with elements aligned to the left and right, with one in the center, that doesn’t overlap the elements when the screen size is too small to contain all elements on the same line (a surprisingly hard challenge, even with the likes of flexbox).&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;#left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;footer-example&quot;&gt;
  &lt;div class=&quot;left&quot;&gt;
    Euexconsequatvelitpariatur.
  &lt;/div&gt;
  &lt;div class=&quot;right&quot;&gt;
    Loremduissitelit.
  &lt;/div&gt;
  &lt;div class=&quot;center&quot;&gt;
    Doloreinlabore.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Try resizing the screen, the elements will stack on top of each other instead of overlapping, whilst keeping the middle element centered. Magic!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B:&lt;/strong&gt; The support for this currently isn’t great, firefox only supports using max &amp;amp; min-content with width, not height, and you must prefix it with -moz-. Safari has partial support and requires the -webkit- prefix. &lt;a href=&quot;http://caniuse.com/#feat=intrinsic-width&quot;&gt;See full browser compatability here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Alex Saunders</name></author><summary type="html">I aim to use this space to keep an updated list of things I recently learnt and found interesting enough to note down.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/dist/images/today-i-learned/today-i-learned-masthead.jpg" /></entry><entry><title type="html">Getting going with CSS Grid</title><link href="/posts/2017/08/29/getting-going-with-css-grid/post/" rel="alternate" type="text/html" title="Getting going with CSS Grid" /><published>2017-08-29T01:03:14+01:00</published><updated>2017-08-29T01:03:14+01:00</updated><id>/posts/2017/08/29/getting-going-with-css-grid/getting-going-with-css-grid</id><content type="html" xml:base="/posts/2017/08/29/getting-going-with-css-grid/post/">&lt;p&gt;Recently I’ve been playing around with the new CSS layout module - CSS Grid (I actually redesigned this site using it). I found a ton of resources for learning how to use CSS grid but found them to all be in different locations with different authors. Here I have collated what I consider to be the most important points to learn with CSS grid (it will probably need updating in the future, however), enjoy!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://drafts.csswg.org/css-grid/&quot;&gt;The full spec for css grid can be found here&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;defining-a-grid&quot;&gt;Defining a grid&lt;/h2&gt;

&lt;p&gt;Grid does not need to be defined as a body-level layout, the &lt;code class=&quot;highlighter-rouge&quot;&gt;display: grid&lt;/code&gt; attribute can be placed on any parent element. You can then define a grid using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt; properties. These properties define the track sizing functions of the grid rows and columns, each value, seperated by a space, defining the size of a row/column.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* creates 2 columns of 50px height */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* creates 3 rows of 100px height */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;All direct children of the parent now get laid out by the auto-placement algorithm, one for each grid cell. Extra rows will be created if needed.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;EvOPov&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - Barebones&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/EvOPov/&quot;&gt;CSS Grid - Barebones&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-gap&lt;/code&gt; property to create a gap between columns and rows. It is the shorthand property, combining the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column-gap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row-gap&lt;/code&gt; properities so that you don’t have to set these individually. Here I have used a &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-gap&lt;/code&gt; value of 10px.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;jLQWxW&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - grid-gap&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/jLQWxW/&quot;&gt;CSS Grid - grid-gap&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;repeat-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Repeat()&lt;/code&gt; Function&lt;/h3&gt;

&lt;p&gt;Also released with CSS is the new &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat()&lt;/code&gt; CSS function. As per the spec, &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat()&lt;/code&gt; represents a repeated fragment of the track-list, allowing for a large number of columns or rows that appear in a recurring pattern to be written in a more compact form. The function can be used on the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; properties.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;/* is equivalent to grid-template-rows: 100px 100px 100px */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;fr-unit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt; unit&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt; data type denotes a flexible length within a grid container. 1fr is for 1 part of the remaining available space (think of it like a fraction).&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;/* creates 4 columns that each take up the same amount of space */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;c&quot;&gt;/* creates 4 columns, with the last being double the width of the first 2. */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;wqQGxJ&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - fr&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/wqQGxJ/&quot;&gt;CSS Grid - fr&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-minmax-function&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;minmax()&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;minmax()&lt;/code&gt; CSS function, also released with CSS Grid, defines a size range greater than or equal to &lt;em&gt;min&lt;/em&gt; and less than or equal to &lt;em&gt;max&lt;/em&gt;. Each value can be a &lt;em&gt;length&lt;/em&gt;, &lt;em&gt;percentage&lt;/em&gt;, a &lt;em&gt;fr&lt;/em&gt; value, or one of the keyword values &lt;code class=&quot;highlighter-rouge&quot;&gt;max-content&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;min-content&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;max-content&lt;/strong&gt;
Represents the largest max-content contribution of the grid items occupying the grid track.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;min-content&lt;/strong&gt;
Represents the largest min-content contribution of the grid items occupying the grid track.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt;
As a maximum, identical to max-content. As a minimum it represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;vJQypY&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - minmax&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/vJQypY/&quot;&gt;CSS Grid - minmax&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;placing-items-in-a-grid&quot;&gt;Placing items in a grid&lt;/h2&gt;

&lt;p&gt;In the previous example, the grid items were automatically placed and laid out. You can, however, explicity define where an item resides in a grid and how much room it takes up. Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column-start&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column-end&lt;/code&gt;, along with &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row-start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row-end&lt;/code&gt; properties, you can define an item’s placement. These properties can be combined into the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row&lt;/code&gt; shorthand properties, using a slash (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) to seperate the start and end values. Examples of all of these properties can be seen below.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;xLQZvz&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - Item placement&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/xLQZvz/&quot;&gt;CSS Grid - Item placement&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;using-space-around-and-space-between&quot;&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;space-around&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;space-between&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When creating a grid where the tracks have absolute sizes and in total are smaller than the area of the parent grid container you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;align-content: space-around&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;justify-content: space-between&lt;/code&gt; properties to spread grid-items around to the bounds of the container. This creates extra space around the tracks and increases any gutter specified with &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-gap&lt;/code&gt;. When elements span more than one track (and therefore cross a gutter), they also gain this extra space.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;rzQWrZ&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - space-around/space-between&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/rzQWrZ/&quot;&gt;CSS Grid - space-around/space-between&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;grid-template-areas&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; property on the grid container defines a grid template by referencing the names of the grid areas which are specificed with the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; property. Repeating the name of a grid area causes the content to span those cells. A full stop represents an empty cell. This syntax is useful for providing a visualsation of the structure of the grid.&lt;/p&gt;

&lt;p&gt;The following example creates a grid that’s four columns wide by three rows tall. The entire top row will be taken up by the &lt;strong&gt;header&lt;/strong&gt; area. The middle row will contain two &lt;strong&gt;main&lt;/strong&gt; areas, one empty cell and one &lt;strong&gt;sidebar&lt;/strong&gt; area. The last row is consumed by the &lt;strong&gt;footer&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;s1&quot;&gt;&quot;header header header header&quot;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&quot;main main . sidebar&quot;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&quot;footer footer footer footer&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;You can then use the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; property on grid-item child elements, referencing the names defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; in order to place elements within the grid:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sidebar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;NvEEJO&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - grid-template-areas&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/NvEEJO/&quot;&gt;CSS Grid - grid-template-areas&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; property we can easily come up with a solution for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Holy_Grail_(web_design)&quot;&gt;‘holy grail layout of web design’&lt;/a&gt; which aims to implement the following design:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dist/images/getting-going-with-css-grid/HolyGrail.png&quot; alt=&quot;Holy Grail Layout&quot; /&gt;
&lt;em&gt;Image by David Lark, distributed under a CC-BY 2.0 license.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The design requires a layout with three columns, with the main page content in one column, and supplementary content such as menus and advertisements in the other columns (sidebars). These columns commonly require separate backgrounds, with borders between them, and should appear to be the same height no matter which column has the tallest content. The sidebars have a fixed width, with the center column adjusting in size to fill the window (fluid or liquid layout). Another requirement is that, when a page does not contain enough content to fill the screen, the footer should drop to the bottom of the browser window instead of leaving blank space underneath. You can see an implementation of these requirements below (using only 29 lines of CSS, including borders and backgrounds!):&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XayoKd&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;alex-saunders&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid - Holy Grail Layout&quot; data-preview=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/alex-saunders/pen/XayoKd/&quot;&gt;CSS Grid - Holy Grail Layout&lt;/a&gt; by Alex Saunders (&lt;a href=&quot;https://codepen.io/alex-saunders&quot;&gt;@alex-saunders&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser Support&lt;/h3&gt;

&lt;p&gt;Although CSS Grid provides a great new way of laying out pages, it’s still being introduced by all major browser vendors and is not fully supported as of yet. Using vender prefixes is strongly recommended in order to get a consistent experience across all major browsers (a good website for finding which vendor prefixes are required can be found &lt;a href=&quot;http://shouldiprefix.com/&quot;&gt;here&lt;/a&gt;). The current state of CSS Grid can be seen below:&lt;/p&gt;

&lt;p class=&quot;ciu_embed&quot; data-feature=&quot;css-grid&quot; data-periods=&quot;future_1,current,past_1,past_2&quot;&gt;
  &lt;a href=&quot;http://caniuse.com/#feat=css-grid&quot;&gt;Can I Use css-grid?&lt;/a&gt; Data on support for the css-grid feature across the major browsers from caniuse.com.
&lt;/p&gt;

&lt;p&gt;The original Grid implementation was a part of IE10. However, this implementation is now vastly different to the current spec and IE has said it will never update to the new specification, the original spec created for IE10 (&amp;amp; IE11) can be viewed &lt;a href=&quot;https://www.w3.org/TR/2011/WD-css3-grid-layout-20110407/&quot;&gt;here&lt;/a&gt;. Rachel Andrew has a &lt;a href=&quot;https://24ways.org/2012/css3-grid-layout/&quot;&gt;great article&lt;/a&gt; on using the IE implemtation.&lt;/p&gt;

&lt;h3 id=&quot;bugs&quot;&gt;Bugs&lt;/h3&gt;

&lt;p&gt;CSS Grid is not without its fair share of bugs. Rachel Andrew has been collecting a community curated list of CSS Grid Layout bugs, incomplete implementations and interop issues. This handy list can be found &lt;a href=&quot;https://github.com/rachelandrew/gridbugs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Alex Saunders</name></author><category term="CSS" /><category term="Grid" /><summary type="html">Recently I’ve been playing around with the new CSS layout module - CSS Grid (I actually redesigned this site using it). I found a ton of resources for learning how to use CSS grid but found them to all be in different locations with different authors. Here I have collated what I consider to be the most important points to learn with CSS grid (it will probably need updating in the future, however), enjoy!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/assets/dist/images/getting-going-with-css-grid/css-grid.jpg" /></entry></feed>